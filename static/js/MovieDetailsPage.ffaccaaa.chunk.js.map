{"version":3,"sources":["services/api.js","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx"],"names":["fetchMovies","url","a","axios","get","data","console","error","defaults","baseURL","params","api_key","fetchMovieReviews","movieId","api","fetchMovieTrending","fetchMovieSearchQuery","searchQuery","fetchMovieDescription","fetchMovieCast","Cast","useState","cast","setCast","useParams","useEffect","services","fetchData","map","performer","src","profile_path","alt","name","width","character","id","length","Reviews","reviews","setReviews","results","author","content","MovieDetailsPage","navigate","useNavigate","movie","setMovie","loading","setLoading","poster_path","title","release_date","vote_average","overview","genres","year","split","onClick","Spinner","join","to","fallback","path","element"],"mappings":"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","file":"static/js/MovieDetailsPage.ffaccaaa.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\naxios.defaults.params = {\n  api_key: \"5c841683b693f172a27449c1327aa5b5\",\n};\n\nasync function fetchMovies(url) {\n  try {\n    const { data } = await axios.get(url);\n\n    return data;\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nconst fetchMovieTrending = function () {\n  return fetchMovies(`/trending/movie/day?`);\n};\n\nconst fetchMovieSearchQuery = function (searchQuery) {\n  return fetchMovies(`/search/movie?&query=${searchQuery}`);\n};\n\nconst fetchMovieDescription = function (movieId) {\n  return fetchMovies(`/movie/${movieId}?&language=en-US`);\n};\n\nconst fetchMovieCast = function (movieId) {\n  return fetchMovies(`/movie/${movieId}/credits?&language=en-US`);\n};\n\nconst fetchMovieReviews = async function (movieId) {\n  return fetchMovies(`/movie/${movieId}/reviews?`);\n};\nconst api = {\n  fetchMovies,\n  fetchMovieTrending,\n  fetchMovieSearchQuery,\n  fetchMovieDescription,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default api;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport services from \"../../services/api\";\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await services.fetchMovieCast(movieId);\n        setCast(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast.cast && (\n        <ul>\n          {cast.cast.map((performer) => (\n            <li key={performer.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w300${performer.profile_path}`}\n                alt={performer.name}\n                width=\"50\"\n              />\n              <p>{performer.name}</p>\n              <p>Character: {performer.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!cast.cast && <h2>No Information Found( {cast.length}</h2>}\n    </div>\n  );\n}\nexport default Cast;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport services from \"../../services/api\";\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await services.fetchMovieReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h3>Reviews:</h3>\n\n      {reviews.results && (\n        <ul>\n          {reviews.results.map((data) => (\n            <li key={data.id}>\n              <p>Author: {data.author}</p>\n              <p>{data.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {!reviews && <h2>No Information Found </h2>}\n    </div>\n  );\n}\nexport default Reviews;\n","import { useState, useEffect, Suspense } from \"react\";\nimport {\n  useParams,\n  useNavigate,\n  NavLink,\n  Route,\n  Routes,\n} from \"react-router-dom\";\nimport Cast from \"../Cast\";\nimport Reviews from \"../Reviews\";\nimport Spinner from \"../Spinner\";\nimport services from \"../../services/api\";\n\nfunction MovieDetailsPage() {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const data = await services.fetchMovieDescription(movieId);\n        setMovie(data);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n  const year = release_date ? release_date.split(\"-\")[0] : \"\";\n\n  return (\n    <>\n      <button onClick={() => navigate(\"/\")}>\n        <span>GO BACK</span>\n      </button>\n      <div>\n        {loading && <Spinner />}\n        <div>\n          {poster_path ? (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt={title}\n              width=\"250\"\n            />\n          ) : (\n            <h2>No Image:(</h2>\n          )}\n        </div>\n        <div>\n          <h2>\n            {title} ({year})\n          </h2>\n          <p>User score: {vote_average * 10}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          {genres ? (\n            <p>{genres.map(({ name }) => name).join(\" \")}</p>\n          ) : (\n            <h3>No Genres Found(</h3>\n          )}\n\n          <h3>Additional information:</h3>\n\n          <ul>\n            <li>\n              <NavLink to=\"cast\">\n                <span> Cast</span>\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\">\n                <span>Reviews</span>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n        <Suspense fallback={<Spinner />}>\n          <Routes>\n            <Route path=\"cast\" element={movie && <Cast movieId={movieId} />} />\n            <Route\n              path=\"reviews\"\n              element={movie && <Reviews movieId={movieId} />}\n            />\n          </Routes>\n        </Suspense>\n      </div>\n    </>\n  );\n}\n\nexport default MovieDetailsPage;\n"],"sourceRoot":""}